import{S as Mt,i as zt,s as qt,C as Pi,w as Pt,x as Rt,y as St,z as yt,A as ct,f as Ot,t as kt,B as Lt,P as ut,l as r,r as l,a as u,m as s,n as c,u as n,h as a,c as m,F as Le,p as d,b as o,G as i,E as wt}from"../../chunks/index-ba2b2825.js";import{P as Jt}from"../../chunks/_post-79929fc2.js";import"../../chunks/helpers-e59642c8.js";import"../../chunks/Categoria.svelte_svelte_type_style_lang-d5b62848.js";function At(x){let p,g,b,v,f,_,Q,ba,ue,Ea,Ma,we,$,za,Je,E,qa,me,Pa,Ra,pe,Sa,ya,Ae,C,G,Ri,Ie,N,Oa,Te,S,ka,fe,La,wa,he,M,Ja,de,Aa,Ia,ve,Ta,ha,xe,j,B,Si,Qe,$e,Ce,Ge,H,U,yi,Ne,je,Be,y,xa,_e,Qa,$a,He,O,Ca,Ga,Na,Ue,X,D,Oi,Xe,De,Fe,Ve,F,V,ki,Ze,Ke,We,z,ja,ge,Ba,Ha,be,Ua,Xa,Ye,Z,Da,ea,K,Fa,aa,q,L,Ee,Va,Za,Me,Ka,Wa,w,ze,Ya,ei,qe,ai,ii,W,Pe,ti,oi,ia,P,ri,Re,si,li,Se,ye,ni,ci,ta,R,ui,Oe,mi,pi,ke,fi,di,oa,J,pt=`<code class="language-console">$ npm init -y
$ npm install prisma typescript ts-node @types/node --save-dev
$ npx prisma init
</code>`,ra,Y,vi,sa,A,ft=`<code class="language-js">generator client <span class="token punctuation">&#123;</span>
  provider <span class="token operator">=</span> <span class="token string">"prisma-client-js"</span> <span class="token comment">//tipo di client</span>
<span class="token punctuation">&#125;</span>
datasource db <span class="token punctuation">&#123;</span>
  provider <span class="token operator">=</span> <span class="token string">"sqlite"</span> <span class="token comment">//DBMS</span>
  url      <span class="token operator">=</span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">"DATABASE_URL&amp;quot"</span><span class="token punctuation">)</span> <span class="token comment">//variabile d\u2019ambiente contenente l\u2019url del DB</span>
<span class="token punctuation">&#125;</span></code>`,la,ee,_i,na,I,dt=`<code class="language-js">model User <span class="token punctuation">&#123;</span>
    id Int @id @<span class="token keyword">default</span><span class="token punctuation">(</span><span class="token function">autoincrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    name String
    surname String
    age Int
<span class="token punctuation">&#125;</span>
</code>`,ca,ae,gi,ua,T,vt=`<code class="language-console">$ npx prisma migrate dev \u2013-name &amp;lt;migration_name&amp;gt;
$ npm install @prisma/client
</code>`,ma,ie,bi,pa,h,Ei,k,Mi;return{c(){p=r("h2"),g=l("Introduzione"),b=u(),v=r("p"),f=l("Qual \xE8 il metodo pi\xF9 usato per creare un database? Una breve ricerca online dar\xE0 come risultato SQL ("),_=r("em"),Q=l("Structured Query Language"),ba=l("), ovvero un linguaggio che permette di creare, aggiornare e ottenere dei dati all\u2019interno di un "),ue=r("em"),Ea=l("database"),Ma=l(". Questo linguaggio presenta, tuttavia, dei problemi non facilmente aggirabili senza aiuti esterni. Alcuni di essi sono gli ORM, argomento principale di questo articolo."),we=u(),$=r("h2"),za=l("Cos\u2019\xE8 un ORM"),Je=u(),E=r("p"),qa=l("ORM ("),me=r("em"),Pa=l("Object Relational Mapping"),Ra=l(") a livello astratto \xE8 una tecnica che permette ad un linguaggio di programmazione basato sul paradigma ad oggetti di manipolare e ottenere informazioni da un database relazionale. Tuttavia, quando pi\xF9 comunemente si parla di ORM ci si riferisce ad un "),pe=r("em"),Sa=l("tool"),ya=l(" che realizza questa tecnica."),Ae=u(),C=r("center"),G=r("img"),Ie=u(),N=r("h2"),Oa=l("Perch\xE9 usare un ORM e come funziona"),Te=u(),S=r("p"),ka=l("Probabilmente esiste almeno un ORM per ogni linguaggio di programmazione ad oggetti, bisogna quindi non fare l\u2019errore di affiancare questo argomento ad un solo linguaggio, tuttavia, per rimanere costanti, da qui in avanti verr\xE0 discussa l\u2019interazione tra un ORM e il linguaggio "),fe=r("em"),La=l("Javascript"),wa=l("."),he=u(),M=r("p"),Ja=l("Al giorno d\u2019oggi quasi tutte le pagine web hanno una componente Javascript che realizza la sua logica. Molte volte questa ha necessit\xE0n di interagire con un database, ma SQL non \xE8 integrato in Javascript e quindi quest\u2019ultimo non permette nativamente questa operazione. In passato per superare questa barriera venne implementata una tecnica, ancora ampiamente utilizzata nei giorni odierni, che sfrutta AJAX ("),de=r("em"),Aa=l("Asynchronous Javascript And XML"),Ia=l(") per ottenere e manipolare i dati tramite delle query scritte in "),ve=r("em"),Ta=l("PHP"),ha=l(" e chiamate dal codice in Javascript: Lo schema logico \xE8 il seguente:"),xe=u(),j=r("center"),B=r("img"),Qe=u(),$e=r("br"),Ce=r("br"),Ge=u(),H=r("center"),U=r("img"),Ne=u(),je=r("br"),Be=u(),y=r("p"),xa=l("Ma questo processo \xE8 molto inefficiente e rischioso, dato che il programmatore, oltre a scrivere codice in Javascript, deve preoccuparsi anche di scrivere "),_e=r("em"),Qa=l("query"),$a=l(" e codice in PHP, rendendo cos\xEC il lavoro pi\xF9 lungo e aumentando la possibilit\xE0 di commettere errori."),He=u(),O=r("p"),Ca=l("Invece un ORM permette di interagire in maniera pi\xF9 efficiente e meno rischiosa col database, scrivendo lui stesso tutte le query e il codice necessario ad interagire con la base di dati e incapsulandolo in alcuni metodi che restituiscono oggetti, i quali poi verranno chiamati dal codice Javascript. In questo modo il programmatore non deve occuparsi dell\u2019interazione con il database e pu\xF2 utilizzare i suoi dati come un qualsiasi oggetto del linguaggio di programmazione."),Ga=r("br"),Na=l(`
Lo schema logico \xE8 il seguente:`),Ue=u(),X=r("center"),D=r("img"),Xe=u(),De=r("br"),Fe=r("br"),Ve=u(),F=r("center"),V=r("img"),Ze=u(),Ke=r("br"),We=u(),z=r("p"),ja=l("Inoltre un ORM, scrivendo lui stesso le query, rimuove molte vulnerabilit\xE0 causate da eventuali controlli non effettuati nella query o errori simili. Una di queste debolezze rimosse \xE8 quella sfruttata da un attacco "),ge=r("em"),Ba=l("SQL injection"),Ha=l(", ovvero un attacco informatico che punta ad aggirare la query \u201C"),be=r("em"),Ua=l("iniettando"),Xa=l("\u201D dentro di essa codice SQL valido e sempre vero (come ad esempio 1 = 1)."),Ye=u(),Z=r("h2"),Da=l("Una breve introduzione a prisma"),ea=u(),K=r("p"),Fa=l("Prisma \xE8 un ORM, basato su NodeJS e Typescript, composto da tre elementi fondamentali:"),aa=u(),q=r("ul"),L=r("li"),Ee=r("strong"),Va=l("Prisma Client"),Za=l(": un costruttore autogenerato di query in base allo "),Me=r("em"),Ka=l("schema"),Wa=u(),w=r("li"),ze=r("strong"),Ya=l("Prisma Migrate"),ei=l(": un sistema che permette di aggiornare il database in base allo "),qe=r("em"),ai=l("schema"),ii=u(),W=r("li"),Pe=r("strong"),ti=l("Prisma Studio"),oi=l(": un\u2019interfaccia grafica che permette di visualizzare e modificare i dati all\u2019interno di un database"),ia=u(),P=r("p"),ri=l("Ma cosa \xE8 lo "),Re=r("em"),si=l("schema"),li=l("? Semplice, \xE8 ci\xF2 che Prisma usa per generare il database, gestire le tabelle in esso e scrivere le query per l\u2019ottenimento dei dati. Volendo, il database lo si pu\xF2 descrivere integralmente nello schema e poi Prisma tramite "),Se=r("em"),ye=r("strong"),ni=l("Prisma Migrate"),ci=l(" generer\xE0 automaticamente il codice necessario a crearlo."),ta=u(),R=r("p"),ui=l("Per creare un progetto in Prisma basta eseguire, dopo essersi assicurati di avere l\u2019ultima versione stabile di "),Oe=r("em"),mi=l("NodeJS"),pi=l(" o "),ke=r("em"),fi=l("Typescript"),di=l(", i seguenti comandi:"),oa=u(),J=r("pre"),ra=u(),Y=r("p"),vi=l("Dentro la cartella prisma sar\xE0 presente lo schema:"),sa=u(),A=r("pre"),la=u(),ee=r("p"),_i=l(`All\u2019interno di questo file dovremo definire le tabelle del nostro database, con annesse le relazioni
fra di esse. Per fare ci\xF2 si usa la parola chiave model, ecco un esempio:`),na=u(),I=r("pre"),ca=u(),ae=r("p"),gi=l("Una volta che lo schema ci soddisfa baster\xE0 eseguire il comando:"),ua=u(),T=r("pre"),ma=u(),ie=r("p"),bi=l(`Fatto ci\xF2 baster\xE0 importare il prisma client in Javascript e il gioco sar\xE0 fatto. Spero di esservi stato
utile.`),pa=u(),h=r("p"),Ei=l("Per informazioni pi\xF9 specifiche e complete, guardare sempre la documentazione ufficiale: "),k=r("a"),Mi=l("https://www.prisma.io/docs/"),this.h()},l(e){p=s(e,"H2",{});var t=c(p);g=n(t,"Introduzione"),t.forEach(a),b=m(e),v=s(e,"P",{});var te=c(v);f=n(te,"Qual \xE8 il metodo pi\xF9 usato per creare un database? Una breve ricerca online dar\xE0 come risultato SQL ("),_=s(te,"EM",{});var Li=c(_);Q=n(Li,"Structured Query Language"),Li.forEach(a),ba=n(te,"), ovvero un linguaggio che permette di creare, aggiornare e ottenere dei dati all\u2019interno di un "),ue=s(te,"EM",{});var wi=c(ue);Ea=n(wi,"database"),wi.forEach(a),Ma=n(te,". Questo linguaggio presenta, tuttavia, dei problemi non facilmente aggirabili senza aiuti esterni. Alcuni di essi sono gli ORM, argomento principale di questo articolo."),te.forEach(a),we=m(e),$=s(e,"H2",{});var Ji=c($);za=n(Ji,"Cos\u2019\xE8 un ORM"),Ji.forEach(a),Je=m(e),E=s(e,"P",{});var oe=c(E);qa=n(oe,"ORM ("),me=s(oe,"EM",{});var Ai=c(me);Pa=n(Ai,"Object Relational Mapping"),Ai.forEach(a),Ra=n(oe,") a livello astratto \xE8 una tecnica che permette ad un linguaggio di programmazione basato sul paradigma ad oggetti di manipolare e ottenere informazioni da un database relazionale. Tuttavia, quando pi\xF9 comunemente si parla di ORM ci si riferisce ad un "),pe=s(oe,"EM",{});var Ii=c(pe);Sa=n(Ii,"tool"),Ii.forEach(a),ya=n(oe," che realizza questa tecnica."),oe.forEach(a),Ae=m(e),C=s(e,"CENTER",{});var Ti=c(C);G=s(Ti,"IMG",{src:!0,alt:!0}),Ti.forEach(a),Ie=m(e),N=s(e,"H2",{});var hi=c(N);Oa=n(hi,"Perch\xE9 usare un ORM e come funziona"),hi.forEach(a),Te=m(e),S=s(e,"P",{});var fa=c(S);ka=n(fa,"Probabilmente esiste almeno un ORM per ogni linguaggio di programmazione ad oggetti, bisogna quindi non fare l\u2019errore di affiancare questo argomento ad un solo linguaggio, tuttavia, per rimanere costanti, da qui in avanti verr\xE0 discussa l\u2019interazione tra un ORM e il linguaggio "),fe=s(fa,"EM",{});var xi=c(fe);La=n(xi,"Javascript"),xi.forEach(a),wa=n(fa,"."),fa.forEach(a),he=m(e),M=s(e,"P",{});var re=c(M);Ja=n(re,"Al giorno d\u2019oggi quasi tutte le pagine web hanno una componente Javascript che realizza la sua logica. Molte volte questa ha necessit\xE0n di interagire con un database, ma SQL non \xE8 integrato in Javascript e quindi quest\u2019ultimo non permette nativamente questa operazione. In passato per superare questa barriera venne implementata una tecnica, ancora ampiamente utilizzata nei giorni odierni, che sfrutta AJAX ("),de=s(re,"EM",{});var Qi=c(de);Aa=n(Qi,"Asynchronous Javascript And XML"),Qi.forEach(a),Ia=n(re,") per ottenere e manipolare i dati tramite delle query scritte in "),ve=s(re,"EM",{});var $i=c(ve);Ta=n($i,"PHP"),$i.forEach(a),ha=n(re," e chiamate dal codice in Javascript: Lo schema logico \xE8 il seguente:"),re.forEach(a),xe=m(e),j=s(e,"CENTER",{});var Ci=c(j);B=s(Ci,"IMG",{src:!0,alt:!0}),Ci.forEach(a),Qe=m(e),$e=s(e,"BR",{}),Ce=s(e,"BR",{}),Ge=m(e),H=s(e,"CENTER",{});var Gi=c(H);U=s(Gi,"IMG",{src:!0,alt:!0}),Gi.forEach(a),Ne=m(e),je=s(e,"BR",{}),Be=m(e),y=s(e,"P",{});var da=c(y);xa=n(da,"Ma questo processo \xE8 molto inefficiente e rischioso, dato che il programmatore, oltre a scrivere codice in Javascript, deve preoccuparsi anche di scrivere "),_e=s(da,"EM",{});var Ni=c(_e);Qa=n(Ni,"query"),Ni.forEach(a),$a=n(da," e codice in PHP, rendendo cos\xEC il lavoro pi\xF9 lungo e aumentando la possibilit\xE0 di commettere errori."),da.forEach(a),He=m(e),O=s(e,"P",{});var va=c(O);Ca=n(va,"Invece un ORM permette di interagire in maniera pi\xF9 efficiente e meno rischiosa col database, scrivendo lui stesso tutte le query e il codice necessario ad interagire con la base di dati e incapsulandolo in alcuni metodi che restituiscono oggetti, i quali poi verranno chiamati dal codice Javascript. In questo modo il programmatore non deve occuparsi dell\u2019interazione con il database e pu\xF2 utilizzare i suoi dati come un qualsiasi oggetto del linguaggio di programmazione."),Ga=s(va,"BR",{}),Na=n(va,`
Lo schema logico \xE8 il seguente:`),va.forEach(a),Ue=m(e),X=s(e,"CENTER",{});var ji=c(X);D=s(ji,"IMG",{src:!0,alt:!0}),ji.forEach(a),Xe=m(e),De=s(e,"BR",{}),Fe=s(e,"BR",{}),Ve=m(e),F=s(e,"CENTER",{});var Bi=c(F);V=s(Bi,"IMG",{src:!0,alt:!0}),Bi.forEach(a),Ze=m(e),Ke=s(e,"BR",{}),We=m(e),z=s(e,"P",{});var se=c(z);ja=n(se,"Inoltre un ORM, scrivendo lui stesso le query, rimuove molte vulnerabilit\xE0 causate da eventuali controlli non effettuati nella query o errori simili. Una di queste debolezze rimosse \xE8 quella sfruttata da un attacco "),ge=s(se,"EM",{});var Hi=c(ge);Ba=n(Hi,"SQL injection"),Hi.forEach(a),Ha=n(se,", ovvero un attacco informatico che punta ad aggirare la query \u201C"),be=s(se,"EM",{});var Ui=c(be);Ua=n(Ui,"iniettando"),Ui.forEach(a),Xa=n(se,"\u201D dentro di essa codice SQL valido e sempre vero (come ad esempio 1 = 1)."),se.forEach(a),Ye=m(e),Z=s(e,"H2",{});var Xi=c(Z);Da=n(Xi,"Una breve introduzione a prisma"),Xi.forEach(a),ea=m(e),K=s(e,"P",{});var Di=c(K);Fa=n(Di,"Prisma \xE8 un ORM, basato su NodeJS e Typescript, composto da tre elementi fondamentali:"),Di.forEach(a),aa=m(e),q=s(e,"UL",{});var le=c(q);L=s(le,"LI",{});var _a=c(L);Ee=s(_a,"STRONG",{});var Fi=c(Ee);Va=n(Fi,"Prisma Client"),Fi.forEach(a),Za=n(_a,": un costruttore autogenerato di query in base allo "),Me=s(_a,"EM",{});var Vi=c(Me);Ka=n(Vi,"schema"),Vi.forEach(a),_a.forEach(a),Wa=m(le),w=s(le,"LI",{});var ga=c(w);ze=s(ga,"STRONG",{});var Zi=c(ze);Ya=n(Zi,"Prisma Migrate"),Zi.forEach(a),ei=n(ga,": un sistema che permette di aggiornare il database in base allo "),qe=s(ga,"EM",{});var Ki=c(qe);ai=n(Ki,"schema"),Ki.forEach(a),ga.forEach(a),ii=m(le),W=s(le,"LI",{});var zi=c(W);Pe=s(zi,"STRONG",{});var Wi=c(Pe);ti=n(Wi,"Prisma Studio"),Wi.forEach(a),oi=n(zi,": un\u2019interfaccia grafica che permette di visualizzare e modificare i dati all\u2019interno di un database"),zi.forEach(a),le.forEach(a),ia=m(e),P=s(e,"P",{});var ne=c(P);ri=n(ne,"Ma cosa \xE8 lo "),Re=s(ne,"EM",{});var Yi=c(Re);si=n(Yi,"schema"),Yi.forEach(a),li=n(ne,"? Semplice, \xE8 ci\xF2 che Prisma usa per generare il database, gestire le tabelle in esso e scrivere le query per l\u2019ottenimento dei dati. Volendo, il database lo si pu\xF2 descrivere integralmente nello schema e poi Prisma tramite "),Se=s(ne,"EM",{});var et=c(Se);ye=s(et,"STRONG",{});var at=c(ye);ni=n(at,"Prisma Migrate"),at.forEach(a),et.forEach(a),ci=n(ne," generer\xE0 automaticamente il codice necessario a crearlo."),ne.forEach(a),ta=m(e),R=s(e,"P",{});var ce=c(R);ui=n(ce,"Per creare un progetto in Prisma basta eseguire, dopo essersi assicurati di avere l\u2019ultima versione stabile di "),Oe=s(ce,"EM",{});var it=c(Oe);mi=n(it,"NodeJS"),it.forEach(a),pi=n(ce," o "),ke=s(ce,"EM",{});var tt=c(ke);fi=n(tt,"Typescript"),tt.forEach(a),di=n(ce,", i seguenti comandi:"),ce.forEach(a),oa=m(e),J=s(e,"PRE",{class:!0});var _t=c(J);_t.forEach(a),ra=m(e),Y=s(e,"P",{});var ot=c(Y);vi=n(ot,"Dentro la cartella prisma sar\xE0 presente lo schema:"),ot.forEach(a),sa=m(e),A=s(e,"PRE",{class:!0});var gt=c(A);gt.forEach(a),la=m(e),ee=s(e,"P",{});var rt=c(ee);_i=n(rt,`All\u2019interno di questo file dovremo definire le tabelle del nostro database, con annesse le relazioni
fra di esse. Per fare ci\xF2 si usa la parola chiave model, ecco un esempio:`),rt.forEach(a),na=m(e),I=s(e,"PRE",{class:!0});var bt=c(I);bt.forEach(a),ca=m(e),ae=s(e,"P",{});var st=c(ae);gi=n(st,"Una volta che lo schema ci soddisfa baster\xE0 eseguire il comando:"),st.forEach(a),ua=m(e),T=s(e,"PRE",{class:!0});var Et=c(T);Et.forEach(a),ma=m(e),ie=s(e,"P",{});var lt=c(ie);bi=n(lt,`Fatto ci\xF2 baster\xE0 importare il prisma client in Javascript e il gioco sar\xE0 fatto. Spero di esservi stato
utile.`),lt.forEach(a),pa=m(e),h=s(e,"P",{});var qi=c(h);Ei=n(qi,"Per informazioni pi\xF9 specifiche e complete, guardare sempre la documentazione ufficiale: "),k=s(qi,"A",{href:!0,target:!0,title:!0});var nt=c(k);Mi=n(nt,"https://www.prisma.io/docs/"),nt.forEach(a),qi.forEach(a),this.h()},h(){Le(G.src,Ri="/img/posts/gli-orm-cosa-sono-e-come-funzionano/orm.webp")||d(G,"src",Ri),d(G,"alt","Schema ORM"),Le(B.src,Si="/img/posts/gli-orm-cosa-sono-e-come-funzionano/ajax.webp")||d(B,"src",Si),d(B,"alt","Schema AJAX"),Le(U.src,yi="/img/posts/gli-orm-cosa-sono-e-come-funzionano/ajaximg.webp")||d(U,"src",yi),d(U,"alt","Schema AJAX"),Le(D.src,Oi="/img/posts/gli-orm-cosa-sono-e-come-funzionano/ormschema.webp")||d(D,"src",Oi),d(D,"alt","Schema ORM"),Le(V.src,ki="/img/posts/gli-orm-cosa-sono-e-come-funzionano/ormimgtwo.webp")||d(V,"src",ki),d(V,"alt","Schema ORM"),d(J,"class","language-console"),d(A,"class","language-js"),d(I,"class","language-js"),d(T,"class","language-console"),d(k,"href","https://www.prisma.io/docs/"),d(k,"target","_blank"),d(k,"title","prisma.io")},m(e,t){o(e,p,t),i(p,g),o(e,b,t),o(e,v,t),i(v,f),i(v,_),i(_,Q),i(v,ba),i(v,ue),i(ue,Ea),i(v,Ma),o(e,we,t),o(e,$,t),i($,za),o(e,Je,t),o(e,E,t),i(E,qa),i(E,me),i(me,Pa),i(E,Ra),i(E,pe),i(pe,Sa),i(E,ya),o(e,Ae,t),o(e,C,t),i(C,G),o(e,Ie,t),o(e,N,t),i(N,Oa),o(e,Te,t),o(e,S,t),i(S,ka),i(S,fe),i(fe,La),i(S,wa),o(e,he,t),o(e,M,t),i(M,Ja),i(M,de),i(de,Aa),i(M,Ia),i(M,ve),i(ve,Ta),i(M,ha),o(e,xe,t),o(e,j,t),i(j,B),o(e,Qe,t),o(e,$e,t),o(e,Ce,t),o(e,Ge,t),o(e,H,t),i(H,U),o(e,Ne,t),o(e,je,t),o(e,Be,t),o(e,y,t),i(y,xa),i(y,_e),i(_e,Qa),i(y,$a),o(e,He,t),o(e,O,t),i(O,Ca),i(O,Ga),i(O,Na),o(e,Ue,t),o(e,X,t),i(X,D),o(e,Xe,t),o(e,De,t),o(e,Fe,t),o(e,Ve,t),o(e,F,t),i(F,V),o(e,Ze,t),o(e,Ke,t),o(e,We,t),o(e,z,t),i(z,ja),i(z,ge),i(ge,Ba),i(z,Ha),i(z,be),i(be,Ua),i(z,Xa),o(e,Ye,t),o(e,Z,t),i(Z,Da),o(e,ea,t),o(e,K,t),i(K,Fa),o(e,aa,t),o(e,q,t),i(q,L),i(L,Ee),i(Ee,Va),i(L,Za),i(L,Me),i(Me,Ka),i(q,Wa),i(q,w),i(w,ze),i(ze,Ya),i(w,ei),i(w,qe),i(qe,ai),i(q,ii),i(q,W),i(W,Pe),i(Pe,ti),i(W,oi),o(e,ia,t),o(e,P,t),i(P,ri),i(P,Re),i(Re,si),i(P,li),i(P,Se),i(Se,ye),i(ye,ni),i(P,ci),o(e,ta,t),o(e,R,t),i(R,ui),i(R,Oe),i(Oe,mi),i(R,pi),i(R,ke),i(ke,fi),i(R,di),o(e,oa,t),o(e,J,t),J.innerHTML=pt,o(e,ra,t),o(e,Y,t),i(Y,vi),o(e,sa,t),o(e,A,t),A.innerHTML=ft,o(e,la,t),o(e,ee,t),i(ee,_i),o(e,na,t),o(e,I,t),I.innerHTML=dt,o(e,ca,t),o(e,ae,t),i(ae,gi),o(e,ua,t),o(e,T,t),T.innerHTML=vt,o(e,ma,t),o(e,ie,t),i(ie,bi),o(e,pa,t),o(e,h,t),i(h,Ei),i(h,k),i(k,Mi)},p:wt,d(e){e&&a(p),e&&a(b),e&&a(v),e&&a(we),e&&a($),e&&a(Je),e&&a(E),e&&a(Ae),e&&a(C),e&&a(Ie),e&&a(N),e&&a(Te),e&&a(S),e&&a(he),e&&a(M),e&&a(xe),e&&a(j),e&&a(Qe),e&&a($e),e&&a(Ce),e&&a(Ge),e&&a(H),e&&a(Ne),e&&a(je),e&&a(Be),e&&a(y),e&&a(He),e&&a(O),e&&a(Ue),e&&a(X),e&&a(Xe),e&&a(De),e&&a(Fe),e&&a(Ve),e&&a(F),e&&a(Ze),e&&a(Ke),e&&a(We),e&&a(z),e&&a(Ye),e&&a(Z),e&&a(ea),e&&a(K),e&&a(aa),e&&a(q),e&&a(ia),e&&a(P),e&&a(ta),e&&a(R),e&&a(oa),e&&a(J),e&&a(ra),e&&a(Y),e&&a(sa),e&&a(A),e&&a(la),e&&a(ee),e&&a(na),e&&a(I),e&&a(ca),e&&a(ae),e&&a(ua),e&&a(T),e&&a(ma),e&&a(ie),e&&a(pa),e&&a(h)}}}function It(x){let p,g;const b=[x[0],mt];let v={$$slots:{default:[At]},$$scope:{ctx:x}};for(let f=0;f<b.length;f+=1)v=Pi(v,b[f]);return p=new Jt({props:v}),{c(){Pt(p.$$.fragment)},l(f){Rt(p.$$.fragment,f)},m(f,_){St(p,f,_),g=!0},p(f,[_]){const Q=_&1?yt(b,[_&1&&ct(f[0]),_&0&&ct(mt)]):{};_&2&&(Q.$$scope={dirty:_,ctx:f}),p.$set(Q)},i(f){g||(Ot(p.$$.fragment,f),g=!0)},o(f){kt(p.$$.fragment,f),g=!1},d(f){Lt(p,f)}}}const mt={id:"2022-10-26-1",titolo:"Gli ORM cosa sono e come funzionano",featured:!1,autore:"Marco Garabello",data:"2022-11-08T00:00:00.000Z",cover:"cover.webp",introduzione:"Cosa sono gli ORM, come funzionano e breve introduzione a Prisma",pubblicato:!0,sezione:"IT",categorie:["ORM","database","Prisma","Javascript","Back End","Linux CLI"]};function Tt(x,p,g){return x.$$set=b=>{g(0,p=Pi(Pi({},p),ut(b)))},p=ut(p),[p]}class Ct extends Mt{constructor(p){super(),zt(this,p,Tt,It,qt,{})}}export{Ct as default,mt as metadata};
